openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: API documentation for TechHub

servers:
  - url: http://localhost:8000/api
    description: Local server

paths:
  /auth/register-employee:
    post:
      tags:
        - Authentication
      summary: Register an employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterEmployeeRequest"
      responses:
        "201":
          description: Employee registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterEmployeeResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /auth/register-recruiter:
    post:
      tags:
        - Authentication
      summary: Register a recruiter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRecruiterRequest"
      responses:
        "201":
          description: Recruiter registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterRecruiterResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "401":
          description: Incorrect email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageLogoutResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
  /skills:
    post:
      tags:
        - Skills
      summary: Create a new skill
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillRequest"
      responses:
        "201":
          description: Skill created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /skills/{id}:
    get:
      tags:
        - Skills
      summary: Get a skill by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the skill
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    put:
      tags:
        - Skills
      summary: Update a skill by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the skill
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillRequest"
      responses:
        "200":
          description: Skill updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Skills
      summary: Delete a skill by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the skill
          schema:
            type: string
      responses:
        "204":
          description: Skill deleted successfully
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /educations:
    post:
      tags:
        - Educations
      summary: Create a new education entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EducationRequest"
      responses:
        "201":
          description: Education entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /educations/{id}:
    get:
      tags:
        - Educations
      summary: Get an education entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the education entry
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Education entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    put:
      tags:
        - Educations
      summary: Update an education entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the education entry
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EducationRequest"
      responses:
        "200":
          description: Education entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Education entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Educations
      summary: Delete an education entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the education entry
          schema:
            type: string
      responses:
        "204":
          description: Education entry deleted successfully
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Education entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /work-experiences:
    post:
      tags:
        - Work Experiences
      summary: Create a new work experience entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkExperienceRequest"
      responses:
        "201":
          description: Work experience entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperienceResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /work-experiences/{id}:
    get:
      tags:
        - Work Experiences
      summary: Get a work experience entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the work experience entry
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperienceResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Work experience entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    put:
      tags:
        - Work Experiences
      summary: Update a work experience entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the work experience entry
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkExperienceRequest"
      responses:
        "200":
          description: Work experience entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperienceResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Work experience entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Work Experiences
      summary: Delete a work experience entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the work experience entry
          schema:
            type: string
      responses:
        "204":
          description: Work experience entry deleted successfully
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Work experience entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /languages:
    post:
      tags:
        - Languages
      summary: Create a new language entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageRequest"
      responses:
        "201":
          description: Language entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /languages/{id}:
    get:
      tags:
        - Languages
      summary: Get a language entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the language entry
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Language entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    put:
      tags:
        - Languages
      summary: Update a language entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the language entry
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageRequest"
      responses:
        "200":
          description: Language entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Language entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Languages
      summary: Delete a language entry by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the language entry
          schema:
            type: string
      responses:
        "204":
          description: Language entry deleted successfully
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Language entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /preferences/fields:
    get:
      tags:
        - Preferences
      summary: Get preference fields
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PreferenceFieldsResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /preferences:
    get:
      tags:
        - Preferences
      summary: Get user preferences
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PreferenceResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    post:
      tags:
        - Preferences
      summary: Create a new preference
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreferenceRequest"
      responses:
        "201":
          description: Preference created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferenceResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /preferences/{id}:
    get:
      tags:
        - Preferences
      summary: Get a preference by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the preference
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferenceResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Preference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

    put:
      tags:
        - Preferences
      summary: Update a preference by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the preference
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreferenceRequest"
      responses:
        "200":
          description: Preference updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferenceResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Preference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Preferences
      summary: Delete a preference by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the preference
          schema:
            type: integer
      responses:
        "204":
          description: Preference deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Preference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

  /employees:
    get:
      summary: Get a list of employees
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: sort_by
          in: query
          description: Sort employees by first_name, last_name, or expected_salary
          schema:
            type: string
            enum: [first_name, last_name, expected_salary]
        - name: sort_direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
        - name: name
          in: query
          description: Name to filter employees
          schema:
            type: string
            maxLength: 255
        - name: salary_min
          in: query
          description: Minimum salary
          schema:
            type: integer
            minimum: 1
        - name: salary_max
          in: query
          description: Maximum salary
          schema:
            type: integer
            exclusiveMinimum: true
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            enum: [10, 20, 30]
        - name: page
          in: query
          description: Number of page
          schema:
            type: integer
      responses:
        "200":
          description: A list of employees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchEmployeeResource"

  /employees/{id}:
    get:
      summary: Get a specific employee by ID
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the employee
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Details of the employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeResource"
        "404":
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

    put:
      summary: Update an employee by ID
      tags:
        - "Employees"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the employee
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeRequest"
      responses:
        "200":
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeUpdateResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /invitations:
    get:
      summary: Get all meeting invitations
      security:
        - bearerAuth: []
      tags:
        - Invitations
      responses:
        "200":
          description: A list of meeting invitations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeInvitationCollection"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /invitations/{id}:
    get:
      summary: Get a specific meeting invitation by ID
      security:
        - bearerAuth: []
      tags:
        - Invitations
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the invitation to retrieve
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Meeting invitation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeInvitationResource"
        "404":
          description: Invitation not found
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                example:
                  message: "Invitation does not exist!"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"

  /wait-lists:
    get:
      tags:
        - Wait Lists
      summary: Get wait lists
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitListResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

    post:
      tags:
        - Wait Lists
      summary: Create a new wait list
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WaitListRequest"
      responses:
        "201":
          description: Wait list created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitListResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /wait-lists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the wait list
        schema:
          type: integer

    get:
      tags:
        - Wait Lists
      summary: Get a wait list by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the wait list
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitListResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Wait list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

    put:
      tags:
        - Wait Lists
      summary: Update a wait list by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the wait list
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WaitListRequest"
      responses:
        "200":
          description: Wait list updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitListResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Wait list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

    delete:
      tags:
        - Wait Lists
      summary: Delete a wait list by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the wait list
          schema:
            type: integer
      responses:
        "204":
          description: Wait list deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Wait list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

  /recruiter/invitations:
    get:
      tags:
        - Invitations
      summary: Retrieve all invitations for the recruiter
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"

    post:
      tags:
        - Invitations
      summary: Create a new invitation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecruiterInvitationRequest"
      responses:
        "201":
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResource"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /recruiter/invitations/{id}:
    get:
      tags:
        - Invitations
      summary: Retrieve a specific invitation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the invitation
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "404":
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"

    put:
      tags:
        - Invitations
      summary: Update a specific invitation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the invitation
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecruiterInvitationRequest"
      responses:
        "200":
          description: Invitation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

    delete:
      tags:
        - Invitations
      summary: Delete a specific invitation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the invitation
          schema:
            type: integer
      responses:
        "204":
          description: Invitation deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"

  /recruiter/{id}:
    put:
      tags:
        - Recruiter
      summary: Update a specific recruiter
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the recruiter
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecruiterRequest"
      responses:
        "200":
          description: Recruiter updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecruiterResource"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: Recruiter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

  /profile:
    get:
      tags:
        - Profile
      summary: Get profile details
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/EmployeeResource"
                  - $ref: "#/components/schemas/RecruiterResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"

  /user/{id}:
    post:
      tags:
        - User
      summary: Update user information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
        - name: _method
          in: query
          description: Method to update
          required: true
          schema:
            type: string
            enum: [PUT]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User information updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResource"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageUnauthorizedResponse"
        "403":
          description: No access to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageForbiddenResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageNotFoundResponse"
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    RegisterEmployeeRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        repeat_password:
          type: string
          format: password
      example:
        first_name: "Michael"
        last_name: "Smith"
        email: "michael.smith@example.com"
        password: "ExamplePassword123!"
        repeat_password: "ExamplePassword123!"

    RegisterEmployeeResponse:
      type: object
      properties:
        token:
          type: string
        user_details:
          $ref: "#/components/schemas/UserResource"
      example:
        id: 2
        views: 0
        location: null
        bio: null
        expected_salary: "0.00"
        portfolio: null
        user:
          id: 30
          email: "John.doe@example.com"
          first_name: "John"
          last_name: "Doe"
          avatar: null
          role:
            id: 1
            name: "employee"

    RegisterRecruiterRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        repeat_password:
          type: string
          format: password
        company_name:
          type: string
        company_url:
          type: string
          format: url
      example:
        first_name: "John"
        last_name: "Doe"
        email: "johndoe@example.com"
        password: "ExamplePassword123!"
        repeat_password: "ExamplePassword123!"
        company_name: "ABC Recruitment Agency"
        company_url: "https://www.abcrecruitmentagency.com"

    RegisterRecruiterResponse:
      type: object
      properties:
        token:
          type: string
        user_details:
          $ref: "#/components/schemas/UserResource"
      example:
        token:
          type: "2|lQP9be3BzmokJF3h4KxufJbsqvmKQdOj7u1Y2MRB"
        user_details:
          id: 1
          company_name: "ABC Recruitment Agency"
          company_description: null
          company_url: "https://www.abcrecruitmentagency.com"
          position: null
          user:
            id: 30
            email: "John.doe@example.com"
            first_name: "John"
            last_name: "Doe"
            avatar: null
            role:
              id: 2
              name: "recruiter"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        email: "kowal@gmail.com"
        password: "12312312"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user_details:
          $ref: "#/components/schemas/UserResource"
      example:
        token:
          type: "2|lQP9be3BzmokJF3h4KxufJbsqvmKQdOj7u1Y2MRB"
        user_details:
          id: 4
          email: "John.doe@example.com"
          first_name: "John"
          last_name: "Doe"
          avatar: null
          role:
            id: 1
            name: "employee"

    UserResource:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        avatar:
          type: string
          nullable: true
        role:
          $ref: "#/components/schemas/RoleResource"
      example:
        id: 4
        email: "John.doe@example.com"
        first_name: "John"
        last_name: "Doe"
        avatar: null
        role:
          id: 1
          name: "employee"

    RoleResource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        id: 1
        role: "employee"

    ValidateErrorResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
      example:
        message: "The name field must not be greater than 255 characters."
        errors:
          name:
            - "The name field must not be greater than 255 characters."

    MessageUnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Unauthorized"

    MessageForbiddenResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "No access to the resource!"

    MessageNotFoundResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "The resource does not exist!"

    MessageLogoutResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Successfull logout!"

    SkillResource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        level:
          type: integer
      required:
        - id
        - name
        - level
      example:
        id: 1
        name: "Python Programming"
        level: 4

    SkillRequest:
      type: object
      required:
        - name
        - level
      properties:
        name:
          type: string
          maxLength: 255
        level:
          type: integer
          minimum: 1
          maximum: 5
      example:
        name: "JavaScript Development"
        level: 5

    EducationResource:
      type: object
      properties:
        id:
          type: integer
        university_name:
          type: string
        field_of_study:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
        - id
        - university_name
        - field_of_study
        - start_date
      example:
        id: 1
        university_name: "University of ABC"
        field_of_study: "Computer Science"
        description: "Studied various programming languages and algorithms."
        start_date: "2018-09-01"
        end_date: "2022-06-30"

    EducationRequest:
      type: object
      required:
        - university_name
        - field_of_study
        - start_date
      properties:
        university_name:
          type: string
          maxLength: 255
        field_of_study:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
      example:
        university_name: "XYZ University"
        field_of_study: "Software Engineering"
        description: "Explored advanced concepts in software systems."
        start_date: "2019-08-15"
        end_date: "2023-05-25"

    WorkExperienceRequest:
      type: object
      required:
        - company_name
        - position
        - start_date
      properties:
        company_name:
          type: string
          maxLength: 255
        position:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 500
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
      example:
        company_name: "ABC Corporation"
        position: "Senior Software Engineer"
        description: "Led a team in developing innovative software solutions."
        start_date: "2022-01-15"
        end_date: "2023-12-31"

    WorkExperienceResource:
      type: object
      properties:
        id:
          type: integer
        company_name:
          type: string
        position:
          type: string
      example:
        id: 1
        company_name: "XYZ Tech"
        position: "Software Developer"

    LanguageRequest:
      type: object
      required:
        - name
        - proficiency
      properties:
        name:
          type: string
          maxLength: 255
        proficiency:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
      example:
        name: "English"
        proficiency: "B2"

    LanguageResource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        proficiency:
          type: string
      example:
        id: 1
        name: "Spanish"
        proficiency: "C1"

    PreferenceRequest:
      type: object
      required:
        - field_name
        - visibility
      properties:
        field_name:
          type: string
        visibility:
          type: string
          enum: [public, private, recruter-only]
      example:
        field_name: "employee.expected_salary"
        visibility: "public"

    PreferenceResource:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        field_name:
          type: string
        visibility:
          type: string
      example:
        id: 1
        user_id: 3
        field_name: "employee.expected_salary"
        visibility: "public"

    PreferenceCollection:
      type: array
      items:
        $ref: "#/components/schemas/PreferenceResource"

    PreferenceFieldsResource:
      type: object
      properties:
        employee:
          type: array
          items:
            type: string
          example:
            - views
            - location
            - bio
            - expected_salary
            - portfolio
        languages:
          type: array
          items:
            type: string
          example:
            - name
            - proficiency
        educations:
          type: array
          items:
            type: string
          example:
            - university_name
            - field_of_study
            - description
            - start_date
            - end_date
        skills:
          type: array
          items:
            type: string
          example:
            - name
            - level
        work_experiences:
          type: array
          items:
            type: string
          example:
            - company_name
            - position
            - description
            - start_date
            - end_date
      example:
        employee:
          - views
          - location
          - bio
          - expected_salary
          - portfolio
        languages:
          - name
          - proficiency
        educations:
          - university_name
          - field_of_study
          - description
          - start_date
          - end_date
        skills:
          - name
          - level
        work_experiences:
          - company_name
          - position
          - description
          - start_date
          - end_date

    SearchEmployeeResource:
      type: object
      properties:
        data:
          items:
            type: array
          properties:
            id:
              type: integer
            expected_salary:
              type: string
              nullable: true
            location:
              type: string
              nullable: true
            user:
              type: object
              properties:
                id:
                  type: integer
                first_name:
                  type: string
                last_name:
                  type: string
                avatar:
                  type: string
                  nullable: true
                email:
                  type: string
                role_id:
                  type: integer
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time
        meta:
          type: object
          properties:
            current_page:
              type: integer
            last_page:
              type: integer
            per_page:
              type: integer
            total:
              type: integer
      example:
        data:
          - id: 2
            expected_salary: "95000.00"
            location: "City D"
            user:
              id: 2
              first_name: "Marek"
              last_name: "Nowak"
              avatar: null
              email: "nowak@gmail.com"
              role_id: 1
              created_at: "2023-11-29T19:59:30.000000Z"
              updated_at: "2023-11-29T19:59:30.000000Z"
        meta:
          current_page: 1
          last_page: 1
          per_page: 30
          total: 1

    EmployeeResource:
      type: object
      properties:
        employee:
          type: object
          properties:
            id:
              type: integer
            views:
              type: integer
            bio:
              type: string
            expected_salary:
              type: string
            portfolio:
              type: string
            user:
              type: object
              items:
                $ref: "#/components/schemas/UserResource"
        languages:
          type: array
          items:
            type: object
        educations:
          type: array
          items:
            type: object
        skills:
          type: array
          items:
            type: object
        work_experiences:
          type: array
          items:
            type: object
      example:
        employee:
          id: 1
          views: 102
          bio: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          expected_salary: "80000.00"
          portfolio: https://portfolio.example.com/jan-kowalski
          user:
            id: 1
            email: kowal@gmail.com
            first_name: Jan
            last_name: Kowalski
            avatar: null
            role:
              id: 1
              name: employee
        languages: []
        educations: []
        skills: []
        work_experiences: []

    EmployeeUpdateResource:
      type: object
      properties:
        employee:
          type: object
          properties:
            id:
              type: integer
            views:
              type: integer
            bio:
              type: string
            expected_salary:
              type: string
            portfolio:
              type: string
            user:
              type: object
              items:
                $ref: "#/components/schemas/UserResource"
      example:
        location: "City A"
        bio: "I am an experienced programmer with a broad range of skills. My expertise lies primarily in developing web applications and designing user interfaces."
        expected_salary: 80000.00
        portfolio: "https://portfolio.example.com/john-doe"
        user:
          id: 1
          email: "john.doe@example.com"
          first_name: "John"
          last_name: "Doe"
          avatar: null
          role:
            id: 1
            role: "employee"

    EmployeeRequest:
      type: object
      properties:
        location:
          type: string
          maxLength: 255
          nullable: true
        bio:
          type: string
          maxLength: 500
          nullable: true
        expected_salary:
          type: number
          nullable: true
        portfolio:
          type: string
          maxLength: 255
          nullable: true
      example:
        location: "City A"
        bio: "I am an experienced programmer with a broad range of skills. My expertise lies primarily in developing web applications and designing user interfaces."
        expected_salary: 80000.00
        portfolio: "https://portfolio.example.com/john-doe"

    EmployeeInvitationResource:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              message:
                type: string
              employee:
                $ref: "#/components/schemas/UserResource"
              recruiter:
                $ref: "#/components/schemas/RecruiterResource"
              status:
                type: string
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
      example:
        data:
          - id: 1
            message: "dasd asd asd"
            employee:
              id: 1
              email: "kowal@gmail.com"
              first_name: "Jan"
              last_name: "Kowalski"
              avatar: null
              role:
                id: 1
                name: "employee"
            recruiter:
              id: 1
              company_name: "XYZ Enterprises"
              company_description: "A multinational corporation specializing in technology solutions."
              company_url: "https://www.xyzenterprises.com"
              position: "Senior Software Engineer"
              user:
                id: 29
                email: "sophie.barnes@example.com"
                first_name: "Sophie"
                last_name: "Barnes"
                avatar: null
                role:
                  id: 2
                  name: "recruiter"
            status: "Pending"
            created_at: "2023-11-29T19:59:30.000000Z"
            updated_at: "2023-11-29T19:59:30.000000Z"

    EmployeeInvitationCollection:
      type: array
      items:
        $ref: "#/components/schemas/EmployeeInvitationResource"

    RecruiterResource:
      type: object
      properties:
        id:
          type: integer
        company_name:
          type: string
        company_description:
          type: string
        company_url:
          type: string
          format: uri
        position:
          type: string
        user:
          $ref: "#/components/schemas/UserResource"
      example:
        id: 1
        company_name: "XYZ Enterprises"
        company_description: "A multinational corporation specializing in technology solutions."
        company_url: "https://www.xyzenterprises.com"
        position: "Senior Software Engineer"
        user:
          id: 29
          email: "sophie.barnes@example.com"
          first_name: "Sophie"
          last_name: "Barnes"
          avatar: null
          role:
            id: 2
            name: "recruiter"

    WaitListRequest:
      type: object
      properties:
        description:
          type: string
          maxLength: 255
        employee_id:
          type: integer
        recruiter_id:
          type: integer
      required:
        - description
      example:
        description: "Example description"
        recruiter_id: 1
        employee_id: 1

    WaitListResource:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
          maxLength: 255
        employee_id:
          type: integer
        recruiter_id:
          type: integer
        employee:
          $ref: "#/components/schemas/UserResource"
        recruiter:
          $ref: "#/components/schemas/RecruiterResource"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-timee
      example:
        id: 1
        description: "Example description"
        employee_id: 1
        recruiter_id: 7
        employee:
          id: 1
          email: "kowal@gmail.com"
          first_name: "Jan"
          last_name: "Kowalski"
          avatar: null
          role:
            id: 1
            name: "employee"
        recruiter:
          id: 7
          company_name: "Company Name sp.z.o.o"
          company_description: null
          company_url: "http://dasasdas.pl"
          position: null
          user:
            id: 36
            email: "joahsn.sdoe@example.com"
            first_name: "John"
            last_name: "Doe"
            avatar: null
            role:
              id: 2
              name: "recruiter"
        created_at: "2023-11-29T19:59:30.000000Z"
        updated_at: "2023-11-29T19:59:30.000000Z"

    RecruiterInvitationRequest:
      type: object
      properties:
        message:
          type: string
          maxLength: 255
        employee_id:
          type: integer
        status:
          type: string
          enum:
            - Pending
            - Cancelled
            - Finished
      required:
        - message
        - employee_id
        - status
      example:
        message: "Dear Candidate, we are thrilled to invite you for an interview at our office next Monday."
        employee_id: 1
        status: "Pending"

    InvitationResource:
      type: object
      properties:
        id:
          type: integer
        message:
          type: string
        employee:
          $ref: "#/components/schemas/UserResource"
        recruiter:
          $ref: "#/components/schemas/RecruiterResource"
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: 1
        message: "Example message"
        employee:
          id: 1
          email: "employee@example.com"
          first_name: "John"
          last_name: "Doe"
          avatar: null
          role:
            id: 1
            name: "employee"
        recruiter:
          id: 2
          company_name: "XYZ Enterprises"
          company_description: "A multinational corporation specializing in technology solutions."
          company_url: "https://www.xyzenterprises.com"
          position: "Senior Recruiter"
          user:
            id: 3
            email: "recruiter@example.com"
            first_name: "Sophie"
            last_name: "Smith"
            avatar: null
            role:
              id: 2
              name: "recruiter"
        status: "Pending"
        created_at: "2023-11-30T08:00:00Z"
        updated_at: "2023-11-30T08:00:00Z"

    RecruiterRequest:
      type: object
      properties:
        company_name:
          type: string
          maxLength: 255
        company_description:
          type: string
          maxLength: 500
        company_url:
          type: string
          format: uri
          maxLength: 255
        position:
          type: string
          maxLength: 255
      required:
        - company_name
      example:
        company_name: "BestTech Recruiters"
        company_description: "We specialize in finding top tech talent for leading companies."
        company_url: "https://www.besttechrecruiters.com"
        position: "Senior Frontend Developer"

    UserRequest:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          maxLength: 255
        last_name:
          type: string
          nullable: true
          maxLength: 255
        avatar:
          type: string
          format: binary
          nullable: true
          description: "Image file (JPEG, PNG, JPG, GIF). Max size: 2048 KB"
        email:
          type: string
          nullable: true
          format: email
          maxLength: 255
      example:
        first_name: "John"
        last_name: "Doe"
        avatar: [image data]
        email: "john.doe@example.com"
